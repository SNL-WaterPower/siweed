TLDR: "Motor control interrupt:
  After calculating desired position with inputFnc(), this controller should estimate the command linearly, then apply a PID calculated error correction.
  The sum is then converted from a velociy to a frequency.
  
Detailed explination:
The algorithm would run something like this, the subscript k denotes the time step. This is also assuming the desired position trajectory over the whole time series (i.e., that it
is pre-calculated, so what is called x_(des, k+1)) is known. The structure has a PID controller in parallel with an open-loop component that is calculated knowing the parameters 
of the system, like the sample rate, screw pitch, and the relationship between motor velocity and commanded frequency.  
 
At timestep k (t_k):
  Check encoder position, x_k
  Check desired position at t_(k+1), call it x_(des,k+1)
    Calculated open-loop velocity command off of current position x_k and desired future position x_(des,k+1) using function F
      F[x_(des,k+1)-x_(enc,k)] -> V_(OL,k)
  Check error from last move:
    (x_(des,k) â€“ x_(enc,k)) = x_(err,k)
  Apply PID control on x_(err,k)  to find V_(CL,k)
  Send V_TOT = V_(OL,k) + V_(CL,k) to motor (convert to frequency first, of course)
 
This way the PID controller can be tuned easily using much smaller gains, since the V_OL should be pretty darn close for all k. The P gain should be ~ F[x_err], and the integral
term should be quite small and will catch any systematic error in the motor model.
 
The assumption here is that the desired motion at time step k+1 is close enough to the desired motion at k that the error correction from the actuation at k will be appropriate at
k+1. This should be true assuming smooth input commands and that dt << T_{wave}.
